import{_ as e,p as o,q as p,Y as a,s,R as n}from"./framework-e1bed10d.js";const l="/assets/lock-0163623c.jpg",t="/assets/lock_table_example-8e3b6b7d.png",r="/assets/write_lock_example-d8c41015.png",c="/assets/mdl_lock_example-1646bc03.png",i={},d=a('<p>在MySQL中根据加锁的范围，大致可以分为 全局锁、表锁、行锁三大类。</p><p><img src="'+l+`" alt=""></p><h2 id="全局锁" tabindex="-1"><a class="header-anchor" href="#全局锁" aria-hidden="true">#</a> 全局锁</h2><p>要使用全局锁，可以执行以下命令。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> flush <span class="token keyword">tables</span> <span class="token keyword">with</span> <span class="token keyword">read</span> <span class="token keyword">lock</span><span class="token punctuation">;</span>
Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这个命令会对整个数据库实例加锁，<code>让这个数据库处于只读状态</code>，除了普通的select语句外，以下的操作都会被阻塞。</p><ul><li>更新语句 insert、update、delete等;</li><li>数据定义语句 create table 、alter table、drop table 等;</li><li>当前读语句 select from for update。</li></ul><p>此时我们执行以下更新语句</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">update</span> t_user <span class="token keyword">set</span> age<span class="token operator">=</span><span class="token number">100</span> <span class="token keyword">where</span> user_id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在当前会话执行会产生以下错误</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>ERROR <span class="token number">1223</span> <span class="token punctuation">(</span>HY000<span class="token punctuation">)</span>: Can&#39;t <span class="token keyword">execute</span> the query because you have a conflicting <span class="token keyword">read</span> <span class="token keyword">lock</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在其他会话中执行更新语句会被阻塞</p><p>通过<code>show processlist</code> 我们可以看到具体的信息。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">show</span> processlist<span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">-------+------+-----------------+------+---------+-------+------------------------------+-------------------------------------------+</span>
<span class="token operator">|</span> Id    <span class="token operator">|</span> <span class="token keyword">User</span> <span class="token operator">|</span> Host            <span class="token operator">|</span> db   <span class="token operator">|</span> Command <span class="token operator">|</span> <span class="token keyword">Time</span>  <span class="token operator">|</span> State                        <span class="token operator">|</span> Info                                      <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">-------+------+-----------------+------+---------+-------+------------------------------+-------------------------------------------+</span>
<span class="token operator">|</span> <span class="token number">13421</span> <span class="token operator">|</span> root <span class="token operator">|</span> localhost:<span class="token number">63350</span> <span class="token operator">|</span> test <span class="token operator">|</span> Sleep   <span class="token operator">|</span> <span class="token number">25623</span> <span class="token operator">|</span>                              <span class="token operator">|</span> <span class="token boolean">NULL</span>                                      <span class="token operator">|</span>
<span class="token operator">|</span> <span class="token number">17957</span> <span class="token operator">|</span> root <span class="token operator">|</span> localhost       <span class="token operator">|</span> test <span class="token operator">|</span> Query   <span class="token operator">|</span>     <span class="token number">0</span> <span class="token operator">|</span> <span class="token keyword">starting</span>                     <span class="token operator">|</span> <span class="token keyword">show</span> processlist                          <span class="token operator">|</span>
<span class="token operator">|</span> <span class="token number">18223</span> <span class="token operator">|</span> root <span class="token operator">|</span> localhost       <span class="token operator">|</span> test <span class="token operator">|</span> Query   <span class="token operator">|</span>    <span class="token number">90</span> <span class="token operator">|</span> Waiting <span class="token keyword">for</span> <span class="token keyword">global</span> <span class="token keyword">read</span> <span class="token keyword">lock</span> <span class="token operator">|</span> <span class="token keyword">update</span> t_user <span class="token keyword">set</span> age<span class="token operator">=</span><span class="token number">100</span> <span class="token keyword">where</span> user_id<span class="token operator">=</span><span class="token number">1</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">-------+------+-----------------+------+---------+-------+------------------------------+-------------------------------------------+</span>
<span class="token number">3</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果要释放全局锁，可以执行以下命令。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">unlock</span> <span class="token keyword">tables</span><span class="token punctuation">;</span>
Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,16),k=s("div",{class:"custom-container tip"},[s("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[s("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[s("circle",{cx:"12",cy:"12",r:"9"}),s("path",{d:"M12 8h.01"}),s("path",{d:"M11 12h1v4h1"})])]),s("p",{class:"custom-container-title"},"TIP"),s("p",null,"全局锁的应用场景是什么？")],-1),u=s("p",null,[n("全局锁的典型应用场景是对数据库做"),s("code",null,"全库逻辑备份"),n("。")],-1),m=s("p",null,"为什么备份数据，要加锁呢？",-1),v=s("p",null,"假如有一个业务场景是，用户购买游戏道具，涉及到扣减用户账号余额和增加用户道具两个操作。",-1),h=s("p",null,"在全库逻辑备份期间，假设不加全局锁的场景，看看会出现什么意外的情况。",-1),b=s("p",null,"现在发起一个逻辑备份，假设备份期间，有一个用户，购买了一件道具，业务逻辑里就要扣掉他的余额，然后往已购道具里面增加一个道具。 如果时间顺序上是先备份账户余额表(user_account)，然后用户购买，然后备份用户道具表(user_product)。",-1),w=s("p",null,"这种情况下，备份的结果是用户表中该用户的余额并没有扣除，反而道具表中增加了一件道具，如果后面用这个备份文件恢复数据库数据的话，用户钱没少，而道具增加了，等于用户白嫖了道具，而在做全库逻辑备份期间，加上全局锁，就不会出现上面这种情况了。",-1),_=s("p",null,"但全局锁会导致整个数据库处于只读状态，在备份期间业务基本就得停摆，这基本是不能接受的。",-1),y=s("div",{class:"custom-container tip"},[s("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[s("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[s("circle",{cx:"12",cy:"12",r:"9"}),s("path",{d:"M12 8h.01"}),s("path",{d:"M11 12h1v4h1"})])]),s("p",{class:"custom-container-title"},"TIP"),s("p",null,"那有没有无锁的一致性备份方案呢？")],-1),g=a(`<p>如果你的数据库引擎使用的是InnoDB，那么在备份数据库之前先开启事务，会先创建 Read View，然后整个事务执行期间都在用这个 Read View，而且由于 MVCC 的支持，备份期间业务依然可以对数据进行更新操作。</p><p>备份数据库的工具是 mysqldump，在使用 mysqldump 时加上 –single-transaction 参数的时候，就会在备份数据库之前先开启事务。这种方法只适用于支持「可重复读隔离级别的事务」的存储引擎。</p><p>InnoDB 存储引擎默认的事务隔离级别正是可重复读，因此可以采用这种方式来备份数据库。</p><h3 id="表锁" tabindex="-1"><a class="header-anchor" href="#表锁" aria-hidden="true">#</a> 表锁</h3><p>MySQL 里面表锁有以下几种：</p><ul><li>表锁</li><li>元数据锁（MDL）</li><li>意向锁</li><li>AUTO-INC 锁</li></ul><p>表锁</p><p>表锁的命令如下：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">--读锁</span>
<span class="token keyword">lock</span> <span class="token keyword">tables</span> t_user <span class="token keyword">read</span><span class="token punctuation">;</span>

<span class="token comment">--写锁</span>
<span class="token keyword">lock</span> <span class="token keyword">tables</span> t_user <span class="token keyword">write</span><span class="token punctuation">;</span>
<span class="token comment">-- 释放锁</span>
<span class="token keyword">unlock</span> <span class="token keyword">tables</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>读锁</code>：代表当前表为只读状态，读锁是一种共享锁。需要注意的是，读锁除了会限制其它线程的操作外，也会限制加锁线程的行为，具体限制如下：</p><ul><li>加锁线程只能对当前表进行读操作，不能对当前表进行更新操作，不能对其它表进行所有操作；</li><li>其它线程只能对当前表进行读操作，不能对当前表进行更新操作，可以对其它表进行所有操作；</li></ul><p>示例图如下：</p><p><img src="`+t+'" alt=""></p><p>写锁：写锁是一种独占锁，需要注意的是，写锁除了会限制其它线程的操作外，也会限制加锁线程的行为，具体限制如下：</p><ul><li>加锁线程对当前表能进行所有操作，不能对其它表进行任何操作；</li><li>其它线程不能对当前表进行任何操作，可以对其它表进行任何操作；</li></ul><p>示例图如下：</p><p><img src="'+r+'" alt=""></p><p>对于InnoDB这种支持行锁的引擎，几乎不会使用表锁命令来控制并发，毕竟锁住整个表的影响面还是太大。</p><h3 id="元数据锁-mdl" tabindex="-1"><a class="header-anchor" href="#元数据锁-mdl" aria-hidden="true">#</a> 元数据锁（MDL）</h3><p>元数据锁：metadata lock，简称MDL，它是在MySQL 5.5版本引进的。 元数据锁不用像表锁那样显式的加锁和释放锁，而是在访问表时被自动加上，以保证读写的正确性。加锁和释放锁规则如下：</p><ul><li><p>对一张表进行 CRUD 操作时，加的是 MDL 读锁；</p></li><li><p>对一张表做结构变更操作的时候，加的是 MDL 写锁；</p></li><li><p>MDL读锁之间不互斥，也就是说，允许多个线程同时对加了 MDL读锁的表进行CRUD(增删改查)操作；</p></li><li><p>MDL写锁，它和读锁、写锁都是互斥的，目的是用来保证变更表结构操作的安全性。</p></li><li><p>MDL是在事务提交后才会释放，这意味着事务执行期间，MDL 是一直持有的。</p></li></ul><p>示例图如下：</p><p><img src="'+c+'" alt=""></p><ol><li>首先，线程 A 先启用了事务（但是一直不提交），然后执行一条 select 语句，此时就先对该表加上 MDL 读锁；</li><li>然后，线程 B 也执行了同样的 select 语句，此时并不会阻塞，因为「读读」并不冲突；</li><li>接着，线程 B 修改了表字段，此时由于线程 A 的事务并没有提交，也就是 MDL 读锁还在占用着，这时线程 B 就无法申请到 MDL 写锁，就会被阻塞；</li><li>那么在线程 B 阻塞后，后续有对该表的 select 语句，就都会被阻塞，如果此时有大量该表的 select 语句的请求到来，就会有大量的线程被阻塞住，这时数据库的线程很快就会爆满了。</li></ol><p>首先我们要解决长事务，事务不提交，就会一直占着MDL锁。在MySQL的information_schema 库的 innodb_trx 表中，你可以查到当前执行中的事务。如果你要做DDL变更的表刚好有长事务在执行，要考虑先暂停DDL，或者kill掉这个长事务。</p><h2 id="意向锁" tabindex="-1"><a class="header-anchor" href="#意向锁" aria-hidden="true">#</a> 意向锁</h2><p>意向锁分为以下两种：</p><ul><li><p>意向共享锁（intention shared lock, IS）：事务有意向对表中的某些行加共享锁（S锁）</p></li><li><p>意向排他锁（intention exclusive lock, IX）：事务有意向对表中的某些行加排他锁（X锁）</p></li></ul><p>在为数据行加共享/排他锁之前，InooDB会先获取该数据行所在在数据表的对应意向锁。</p><p>意向共享锁和意向独占锁是表级锁，意向锁之间也不会发生冲突，并且也不会和行级的共享锁和独占锁发生冲突， 只会和共享表锁（lock tables ... read）和独占表锁（lock tables ... write）发生冲突。</p><p>如果没有意向锁，那么加表锁时，就需要遍历表里所有记录，查看是否有记录存在独占锁，这样效率会很慢。 意向锁的目的是为了快速判断表里是否有记录被加锁。</p><h2 id="行锁" tabindex="-1"><a class="header-anchor" href="#行锁" aria-hidden="true">#</a> 行锁</h2><p>参考资料：</p><ul><li>《MySQL 45 讲》</li></ul>',34),x=[d,k,u,m,v,h,b,w,_,y,g];function q(f,D){return o(),p("div",null,x)}const L=e(i,[["render",q],["__file","mysql_lock.html.vue"]]);export{L as default};
