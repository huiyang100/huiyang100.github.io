import{_ as p,p as e,q as o,s as n,R as s,t as c,Y as a,n as l}from"./framework-e1bed10d.js";const u="/assets/salary-f0ac1888.png",i="/assets/salary_result-0dab1659.png",k={},r=n("h2",{id:"需求分析",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#需求分析","aria-hidden":"true"},"#"),s(" 需求分析")],-1),d=n("p",null,"下面是一个常见的工资条样本，我们先来看看工资条是干什么的以及包含哪些内容。",-1),v=n("p",null,[n("img",{src:u,alt:""})],-1),m=n("p",null,"通过分析发现工资条的每一项可以理解为一个薪资项，所有薪资项组合在一起是一个员工的薪资构成，也称为工资条。",-1),g=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,"什么是基础指标")],-1),b=a("<p>进一步的拆分，我们发现其中 <code>姓名</code> <code>部门</code> <code>职位</code> <code>级别</code> <code>工号</code> <code>试用期状态</code> <code>基本工资</code> 等第一行的数据，是员工的基础数据，这些数据会发生变更，但大部分情况下它都是一个等值 不需要动态的加工逻辑，这部分数据我们可以称之为 <code>基础指标</code>。</p>",1),x=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,"什么是动态薪资项")],-1),h=a("<p>工资条的第二行的每一项的值则不是一个直接的数值，而是需要根据规则动态的计算得到，这个规则会根据员工的类别，或者公司的运营情况不同，同时整个薪资项也可能增加或者减少。</p><p>举一个案例方便理解，假如当前研发岗位的的薪资规则如下。</p><ul><li>月份 = 当前月份</li><li>底薪 = 如果是试用期状态则是基本工资，否则是基本工资*0.8</li><li>空调补助 = 如果是6月或者7月则补助 1200元，其他月份为0</li><li>绩效系数 = 如果职位是研发并且级别是P2 则系数是1，否则系数是0.8</li><li>绩效奖金= 如果级别是p1 则绩效奖金是 5000<em>绩效系数，否则是 10000</em>绩效系数</li><li>事假扣除= 基本工资/应出勤天数*事假</li><li>病假扣除= 基本工资/应出勤天数*病假 * 0.4</li><li>应发工资= 底薪+岗位补贴+绩效奖金+税前补差-事假扣除+空调补助</li></ul>",3),q=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,"怎么实现动态的薪资项？")],-1),f=n("p",null,"每一个薪资项都是一个动态的规则，且薪资项之间可能会存在依赖关系，比如 底薪依赖 试用期状态和基本工资，而应发工资又依赖底薪。 所以整个薪资项应该是有序的，按照预先定义好的顺序依次执行得到每一项的结果。",-1),w=n("p",null,"同时，薪资项的计算有财务精度的要求，需要计算的过程中保留完整的精度。",-1),_=n("p",null,[s("通过对比"),n("code",null,"grovvy"),s(" 和 "),n("code",null,"QLExpress"),s("的功能后，我们发现QLExpress完全满足这一需求，但是为了让HR能更好的配置薪资项，我们对"),n("code",null,"QLExpress"),s(" 进行了扩展，让其支持类似 excel的语法。")],-1),y={href:"https://github.com/huiyang100/excel-formula-engine",title:"excel-formula-engine",target:"_blank",rel:"noopener noreferrer"},C=a(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">DefaultContext</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> expressContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultContext</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ExpressRunner</span> runner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExpressRunner</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">QLExpressExcelMoudle</span><span class="token punctuation">.</span><span class="token function">registerModule</span><span class="token punctuation">(</span>runner<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> expresses <span class="token operator">=</span> <span class="token string">&quot;IF(score &gt;=100,&#39;满分&#39;,IF(score&gt;=80,&#39;优秀&#39;,&#39;不够优秀&#39;))&quot;</span><span class="token punctuation">;</span>
        expressContext<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;score&quot;</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> result <span class="token operator">=</span> runner<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>expresses<span class="token punctuation">,</span> expressContext<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>优秀
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="实现工资条的需求" tabindex="-1"><a class="header-anchor" href="#实现工资条的需求" aria-hidden="true">#</a> 实现工资条的需求</h2><h3 id="引入依赖" tabindex="-1"><a class="header-anchor" href="#引入依赖" aria-hidden="true">#</a> 引入依赖</h3><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.github.chengzh100<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>excel-module<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0.2.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="计算逻辑" tabindex="-1"><a class="header-anchor" href="#计算逻辑" aria-hidden="true">#</a> 计算逻辑</h3><p>将薪资项加载后，填充到计算器中，依次计算每一项的值。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SalaryTest</span> <span class="token punctuation">{</span>

   <span class="token doc-comment comment">/****
    * cheng
    * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">Exception</span></span>
    */</span>
   <span class="token annotation punctuation">@Test</span>
   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">calculateTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>

       <span class="token class-name">DefaultContext</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> expressContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultContext</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token class-name">ExpressRunner</span> runner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExpressRunner</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token class-name">QLExpressExcelMoudle</span><span class="token punctuation">.</span><span class="token function">registerModule</span><span class="token punctuation">(</span>runner<span class="token punctuation">)</span><span class="token punctuation">;</span>
       expressContext<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;姓名&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;程&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       expressContext<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;部门&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;信息技术&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       expressContext<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;职位&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;研发&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       expressContext<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;级别&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;P1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       expressContext<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;工号&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;123456&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       expressContext<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;试用期状态&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;试用期&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       expressContext<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;基本工资&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       expressContext<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;岗位补贴&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       expressContext<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;税前补差&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       expressContext<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;事假&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       expressContext<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;病假&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       expressContext<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;应出勤天数&quot;</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       expressContext<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;月份&quot;</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> expressMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       expressMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;底薪&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;IF(试用期状态==&#39;试用期&#39;,基本工资,基本工资*0.8)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       expressMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;空调补助&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;IF(OR(月份==6,月份==7),1200,0)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       expressMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;绩效系数&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;IF(AND(职位==&#39;研发&#39;,级别==&#39;P2&#39;),1,0.8)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       expressMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;绩效奖金&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;IF(级别==&#39;P1&#39;,5000*绩效系数,10000*绩效系数)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       expressMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;事假扣除&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;基本工资/应出勤天数*事假&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       expressMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;病假扣除&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;基本工资/应出勤天数*病假*0.4&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       expressMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;应发工资&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ROUND(底薪+岗位补贴+绩效奖金+税前补差-事假扣除+空调补助,2)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       expressMap<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>en <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
           <span class="token keyword">try</span> <span class="token punctuation">{</span>
               <span class="token class-name">Object</span> value <span class="token operator">=</span> runner<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>en<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> expressContext<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
               <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;薪资项:&quot;</span> <span class="token operator">+</span> en<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;:==&gt;&quot;</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
               expressContext<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>en<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
               e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token punctuation">}</span>


       <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


   <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>薪资项:底薪:==&gt;10000
薪资项:空调补助:==&gt;1200
薪资项:绩效系数:==&gt;0.8
薪资项:绩效奖金:==&gt;4000.0
薪资项:事假扣除:==&gt;434.7826086957
薪资项:病假扣除:==&gt;347.82608695656
薪资项:应发工资:==&gt;15865.22
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>把动态薪资项的计算结果填充到工资条中，我们就得到了一个完整的工资条。 <img src="`+i+'" alt=""></p><p>通过把薪资项持久化到数据库中，整个薪资规则支持动态的扩展薪资项，而不需要重新编写计算薪资的代码。</p><p>当然，这只是第一步的实现，实际的开发中，我们还要在前端实现语法解析，方便快捷的配置规则，以及语法校验。</p>',14);function E(M,j){const t=l("ExternalLinkIcon");return e(),o("div",null,[r,d,v,m,g,b,x,h,q,f,w,_,n("p",null,[s("扩展的逻辑非常简单，具体的可以参考我的实现 "),n("a",y,[s("excel-formula-engine"),c(t)])]),C])}const S=p(k,[["render",E],["__file","salary_calculator.html.vue"]]);export{S as default};
